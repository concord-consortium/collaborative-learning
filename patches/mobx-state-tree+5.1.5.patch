diff --git a/node_modules/mobx-state-tree/dist/mobx-state-tree.js b/node_modules/mobx-state-tree/dist/mobx-state-tree.js
index e0f7f6a..9780356 100644
--- a/node_modules/mobx-state-tree/dist/mobx-state-tree.js
+++ b/node_modules/mobx-state-tree/dist/mobx-state-tree.js
@@ -1590,9 +1590,10 @@ var ObjectNode = /** @class */ (function (_super) {
         enumerable: false,
         configurable: true,
         writable: true,
-        value: function () {
+        value: function (runHooks) {
+            if (runHooks === void 0) { runHooks = true; }
             if (this._observableInstanceState === 0 /* UNINITIALIZED */) {
-                this.createObservableInstance();
+                this.createObservableInstance(runHooks);
             }
         }
     });
@@ -1600,8 +1601,9 @@ var ObjectNode = /** @class */ (function (_super) {
         enumerable: false,
         configurable: true,
         writable: true,
-        value: function () {
-            var e_1, _a;
+        value: function (runHooks) {
+            var e_1, _a, e_2, _b;
+            if (runHooks === void 0) { runHooks = true; }
             if (devMode()) {
                 if (this.state !== NodeLifeCycle.INITIALIZING) {
                     // istanbul ignore next
@@ -1626,7 +1628,7 @@ var ObjectNode = /** @class */ (function (_super) {
                 // initialize the uninitialized parent chain from parent to child
                 for (var parentChain_1 = __values(parentChain), parentChain_1_1 = parentChain_1.next(); !parentChain_1_1.done; parentChain_1_1 = parentChain_1.next()) {
                     var p = parentChain_1_1.value;
-                    p.createObservableInstanceIfNeeded();
+                    p.createObservableInstanceIfNeeded(false);
                 }
             }
             catch (e_1_1) { e_1 = { error: e_1_1 }; }
@@ -1657,8 +1659,28 @@ var ObjectNode = /** @class */ (function (_super) {
                 this._addSnapshotReaction();
             this._childNodes = EMPTY_OBJECT;
             this.state = NodeLifeCycle.CREATED;
-            this.fireHook(Hook.afterCreate);
-            this.finalizeCreation();
+            if (runHooks) {
+                this.fireHook(Hook.afterCreate);
+                // Note that the parent might not be finalized at this point
+                // so afterAttach won't be called in that case
+                this.finalizeCreation();
+                try {
+                    // run the hooks of the parents that we created
+                    for (var _c = __values(parentChain.reverse()), _d = _c.next(); !_d.done; _d = _c.next()) {
+                        var p = _d.value;
+                        p.fireHook(Hook.afterCreate);
+                        // This will call afterAttach on the child
+                        p.finalizeCreation();
+                    }
+                }
+                catch (e_2_1) { e_2 = { error: e_2_1 }; }
+                finally {
+                    try {
+                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
+                    }
+                    finally { if (e_2) throw e_2.error; }
+                }
+            }
         }
     });
     Object.defineProperty(ObjectNode.prototype, "root", {
@@ -1957,19 +1979,19 @@ var ObjectNode = /** @class */ (function (_super) {
         value: function () {
             var _this = this;
             this.baseFinalizeCreation(function () {
-                var e_2, _a;
+                var e_3, _a;
                 try {
                     for (var _b = __values(_this.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
                         var child = _c.value;
                         child.finalizeCreation();
                     }
                 }
-                catch (e_2_1) { e_2 = { error: e_2_1 }; }
+                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                 finally {
                     try {
                         if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                     }
-                    finally { if (e_2) throw e_2.error; }
+                    finally { if (e_3) throw e_3.error; }
                 }
                 _this.fireInternalHook(Hook.afterCreationFinalization);
             });
diff --git a/node_modules/mobx-state-tree/dist/mobx-state-tree.module.js b/node_modules/mobx-state-tree/dist/mobx-state-tree.module.js
index cffca0a..f45576b 100644
--- a/node_modules/mobx-state-tree/dist/mobx-state-tree.module.js
+++ b/node_modules/mobx-state-tree/dist/mobx-state-tree.module.js
@@ -1586,9 +1586,10 @@ var ObjectNode = /** @class */ (function (_super) {
         enumerable: false,
         configurable: true,
         writable: true,
-        value: function () {
+        value: function (runHooks) {
+            if (runHooks === void 0) { runHooks = true; }
             if (this._observableInstanceState === 0 /* UNINITIALIZED */) {
-                this.createObservableInstance();
+                this.createObservableInstance(runHooks);
             }
         }
     });
@@ -1596,8 +1597,9 @@ var ObjectNode = /** @class */ (function (_super) {
         enumerable: false,
         configurable: true,
         writable: true,
-        value: function () {
-            var e_1, _a;
+        value: function (runHooks) {
+            var e_1, _a, e_2, _b;
+            if (runHooks === void 0) { runHooks = true; }
             if (devMode()) {
                 if (this.state !== NodeLifeCycle.INITIALIZING) {
                     // istanbul ignore next
@@ -1622,7 +1624,7 @@ var ObjectNode = /** @class */ (function (_super) {
                 // initialize the uninitialized parent chain from parent to child
                 for (var parentChain_1 = __values(parentChain), parentChain_1_1 = parentChain_1.next(); !parentChain_1_1.done; parentChain_1_1 = parentChain_1.next()) {
                     var p = parentChain_1_1.value;
-                    p.createObservableInstanceIfNeeded();
+                    p.createObservableInstanceIfNeeded(false);
                 }
             }
             catch (e_1_1) { e_1 = { error: e_1_1 }; }
@@ -1653,8 +1655,28 @@ var ObjectNode = /** @class */ (function (_super) {
                 this._addSnapshotReaction();
             this._childNodes = EMPTY_OBJECT;
             this.state = NodeLifeCycle.CREATED;
-            this.fireHook(Hook.afterCreate);
-            this.finalizeCreation();
+            if (runHooks) {
+                this.fireHook(Hook.afterCreate);
+                // Note that the parent might not be finalized at this point
+                // so afterAttach won't be called in that case
+                this.finalizeCreation();
+                try {
+                    // run the hooks of the parents that we created
+                    for (var _c = __values(parentChain.reverse()), _d = _c.next(); !_d.done; _d = _c.next()) {
+                        var p = _d.value;
+                        p.fireHook(Hook.afterCreate);
+                        // This will call afterAttach on the child
+                        p.finalizeCreation();
+                    }
+                }
+                catch (e_2_1) { e_2 = { error: e_2_1 }; }
+                finally {
+                    try {
+                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
+                    }
+                    finally { if (e_2) throw e_2.error; }
+                }
+            }
         }
     });
     Object.defineProperty(ObjectNode.prototype, "root", {
@@ -1953,19 +1975,19 @@ var ObjectNode = /** @class */ (function (_super) {
         value: function () {
             var _this = this;
             this.baseFinalizeCreation(function () {
-                var e_2, _a;
+                var e_3, _a;
                 try {
                     for (var _b = __values(_this.getChildren()), _c = _b.next(); !_c.done; _c = _b.next()) {
                         var child = _c.value;
                         child.finalizeCreation();
                     }
                 }
-                catch (e_2_1) { e_2 = { error: e_2_1 }; }
+                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                 finally {
                     try {
                         if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                     }
-                    finally { if (e_2) throw e_2.error; }
+                    finally { if (e_3) throw e_3.error; }
                 }
                 _this.fireInternalHook(Hook.afterCreationFinalization);
             });
